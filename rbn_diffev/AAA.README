This directory contains a working example for a refinement of single cystal
data through SWIFT.

================================================================================
A list of files follows later on.

To control the amount of work to be performed, respectively the amount of
parallel work the following values should be edited:

File diffev_setup.mac, lines 3, 4
                       pop_n[1]= 21 ! Size of population
                       pop_c[1]= 21 ! Size of children population

File setup.mac       , line 2
                       nindiv = 1   ! Number of individual repetitions

File discus_setup.mac, dimen= 50 ! Size of simulated crystal
                       sbox = 10 ! Size of Fourier box
                       over =  1 ! Oversampling of model crystal

The values of pop_c and nindiv determine the number of calls to DISCUS,
that could be done in parallel. DISCUS executes pop_c * nindiv times.
For the current refinement nindiv = 1 is just fine, as a single calculation
is a good representation of the actual refinement parameters. Thus the
problem will mostly scale with the size of the population pop_c.
pop_c and pop_n are not required to be of identical size. pop_n is the
population size that survives into the next generation. If pop_c is larger
than pop_n, more members of the population are "killed" before the next
generation. This increases the "evolutionary" pressure and wil force
faster convergence, yet risks convergence into a false minimum...

The parameters in discus_setup.mac will determine how good the final
aggreement can be. Especially a larger crystal size, coupled with an
oversampling of more than one will yield a better fit. This will cost
more computing time, but all of this is in parts of the code that cannot be
done in parallel (yet).

In order to test SWIFT in parallel, leave discus_setup.mac as is, nindiv=1
and increase pop_n and pop_c

================================================================================

Directories:

CALC    ! Calculated diffraction pattern are placed here
CELL    ! Contains the input crystal structure
DATA    ! Contains the experimental data
DIFFEV  ! Control files written by DIFFEV
FINAL   ! Backup of current best solutions

================================================================================

Files:

refine.swift   ! The SWIFT script to run the refinement
               ! There are several lines with ?????? in the code, these
               ! point to questions, where I see room for improvement

diffev.py      ! The PYTHON interfaces to DIFFEV, DISCUS, KUPLOT
discus.py
kuplot.py

run.sh         ! Shell script to compile and run refine.swift

#
# FORTRAN to PYTHON Libraries.
# Not part of the archive, as these need to be created locally (?)
#
lib_diffev.so  ! DIFFEV needs to be compiled with the MPI option OFF
lib_discus.so
lib_kuplot.so  ! KUPLOT requires the PGPLOT Library as SHARABLE libpgplot.so

#
#  Macros for DIFFEV, DISCUS, KUPLOT
#

diffev_start.mac   ! Main DIFFEV macro, defines the refinement settings, initializes
diffev_setup.mac   ! Does the actual settings
cleanup.mac        ! cleans a previous refinement
setup.mac          ! Define number of individual calculations to be performed

discus_swift.mac   ! Main DISCUS macro
discus_variables.mac ! Define variable names
discus_setup.mac   ! Central setup to change conrol parameters
discus_sort.mac    ! Perform short range order sort
discus_fourier.mac ! Calculate the Fourier transformation and write output

kuplot_swift.mac   ! Main KUPLOT macro
kup.select.mac     ! Select backup mode
kup.backup.mac     ! do actual backup of current best solution

GENERATION         ! This file informs the user about the current generation number
                   ! population size and location of refinement files
                   ! automatically created by DIFFEV

#
# KUPLOT macros to display the refinement status
#
kpara.mac          ! plots the development of the cost function or a parameter
                   ! use as:
                   ! @kpara.mac 0
                   ! plots the development of R-value, shows best, worst and
                   ! average r-value
                   !
                   ! @kpara.mac 1   ! or 2 or 3
                   ! Plots the development of parameter 1, 2, or 3
                   ! The smallest, largest and average values are shown

kpar_par.mac       ! Plots correlations between parameters
                   ! Use as:
                   ! @kpar_par.mac <generation>, <para_1>, <para_2>
                   !
                   ! @kpar_par.mac -1, 1,0
                   ! This will plot the correlation between parameter 1 and
                   ! parameter 0 (=r-value==Cost function) in generation -1
                   ! i.e. the current last generation
                   ! Red dots are children of current population, blue dot is
                   ! the current best member and black dots are trial values
                   ! for the next generation
                   ! Try as
                   ! @kpar_par -1, 1, 0
                   ! @kpar_par -1, 2, 0
                   ! @kpar_par -1, 3, 0
                   !
                   ! @kpar_par -1, 1, 2 ! Correlation between params 1 and 2
                   !                      Should be an irregularly shaped cloud,
                   !
                   ! @kpar_par  0, 1, 0 ! Does not work, a bug I need to fix...

ksingle.mac        ! Plots the experimental data in comparison to calculated
                   ! @ksingle.mac 1    ! plot the current best solution
                   ! @ksingle.mac 2    ! plot the current second best solution
